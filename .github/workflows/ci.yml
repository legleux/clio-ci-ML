name: Build Clio
on:
  repository_dispatch:
    types: build
  workflow_dispatch:
  push:

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: legleux/clio
      - name: Lint
        run: |
          echo "clang-format check goes here"


  build:
    runs-on: ${{ matrix.runner || 'ubuntu-20.04' }}
    name: ${{ matrix.name }}
    needs: lint
    outputs:
      output2: ${{ steps.build.outputs.test }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - runner: ubuntu-20.04
            name: Ubuntu 20.04

          - runner: ubuntu-18.04
            name: Ubuntu 18.04

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
        with:
          repository: legleux/clio
          ref: ${{ github.event.client_payload.branch }}
          path: clio_src

      - name: See what's in here
        run: ls -lh

      - name: Cache Boost
        uses: actions/cache@v1
        id: boost-cache
        with:
          path: boost_1_75_0
          key: ${{ runner.OS }}-boost

      - name: Build boost
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          wget https://boostorg.jfrog.io/artifactory/main/release/1.75.0/source/boost_1_75_0.zip
          unzip -q boost_1_75_0.zip
          cd boost_1_75_0
          ./bootstrap.sh && ./b2 cxxflags="-std=c++14"

      - name: Build clio
        id: build
        working-directory: clio_src
        env:
          BRANCH: ${{ github.event.client_payload.branch }}
          REF: ${{ github.event.client_payload.SHA }}
        run: |
          OS=${{ matrix.runner }}
          export BOOST_ROOT=$GITHUB_WORKSPACE/boost_1_75_0
          echo "BOOST_ROOT: $BOOST_ROOT"
          echo "BRANCH@REF: $BRANCH $REF"
          if [[ $OS =~ "ubuntu" ]]; then
            sudo apt-get update
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y protobuf-compiler libprotobuf-dev bison flex autoconf
            export CC=$(which gcc-9)
            export CXX=$(which g++-9)
          else
            brew install git cmake pkg-config protobuf openssl@1.1 ninja
            export OPENSSL_ROOT=$(brew --prefix openssl@1.1)
            export OPENSSL_ROOT_DIR=$OPENSSL_ROOT
            export OPENSSL_CRYPTO_LIBRARY=$OPENSSL_ROOT/lib/libcrypto.a
          fi
          cmake -B build && cmake --build build --parallel $(nproc)

      - name: Artifact clio_tests
        uses: actions/upload-artifact@v2
        if: ${{ matrix.runner }} == 'ubuntu'
        with:
          name: clio_tests
          path: clio/build/clio_tests

      # - name: Create package
      #   working-directory: clio/build
      #   run: cpack -G DEB

      # - name: Save Package
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: package
      #     path: ./clio/_packages/*.deb

  # test:
  #   needs: build
  #   runs-on: ubuntu-20.04
  #   container:
  #     image: legleux/clio_tests

  #   steps:
  #     - name: Get clio_tests
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: clio_tests
  #         path: /

  #     - name: Test Clio
  #       # run: chmod +x /test/clio_tests && ls -lah && ls -lh /test && /test/clio_tests
  #       run: |
  #         pg_ctlcluster 12 main start
  #         su postgres -c"psql -c\"alter user postgres with password 'postgres'\""
  #         su cassandra -c "/opt/cassandra/bin/cassandra -R" && sleep 5
  #         chmod +x /clio_tests && /clio_tests
  # upload:
  #   runs-on: 'ubuntu-20.04'
  #   needs: test
  #   steps:
  #     - name: Push to Artifactory
  #       run: echo "am pushing"
