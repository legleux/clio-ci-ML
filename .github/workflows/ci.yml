name: Build Clio
on:
  repository_dispatch:
    types: build
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ${{ matrix.runner || 'ubuntu-20.04' }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - runner: ubuntu-20.04
            name: Ubuntu 20.04

          - runner: macos-11
            name: macOS 11

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: legleux/clio
          ref: pkging
          path: clio

      - name: Cache Boost
        uses: actions/cache@v1
        id: boost-cache
        with:
          path: boost_1_75_0
          key: ${{ runner.OS }}-boost

      - name: Build boost
        if: steps.boost-cache.outputs.cache-hit != 'true'
        run: |
          wget https://boostorg.jfrog.io/artifactory/main/release/1.75.0/source/boost_1_75_0.zip
          unzip -q boost_1_75_0.zip
          cd boost_1_75_0
          ./bootstrap.sh && ./b2 cxxflags="-std=c++14"

      - name: Build
        working-directory: clio
        run: |
          OS=${{ matrix.runner }}
          ls -lah
          export BOOST_ROOT=$GITHUB_WORKSPACE/boost_1_75_0
          echo "BOOST_ROOT: $BOOST_ROOT"
          if [[ $OS =~ "ubuntu" ]]; then
            sudo apt-update
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y protobuf-compiler libprotobuf-dev bison flex autoconf
            export CC=$(which gcc-9)
            export CXX=$(which g++-9)
          else
            brew install git cmake pkg-config protobuf openssl@1.1 ninja
            export OPENSSL_ROOT=$(brew --prefix openssl@1.1)
          fi
          cmake -B build && cmake --build build --parallel $(nproc)

      - name: CPack
        working-directory: clio/build
        run: cpack -G DEB

      - name: Save Package
        uses: actions/upload-artifact@master
        with:
          name: package
          path: ./clio/build/_packages/*.deb